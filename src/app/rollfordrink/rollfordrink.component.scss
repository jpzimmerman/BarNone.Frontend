@use "sass:math";

:root {
  --startAngleX: 0deg;
  --startAngleY: 0deg;
  --startAngleZ: 0deg;
}

$containerWidth: 15vw;
$containerHeight: $containerWidth;
$faceWidth: $containerWidth * 0.5;
$faceHeight: $faceWidth * 0.86;
$transitionDuration: 0.5s;
$animationDuration: 2s;
$angle: 53deg;
$ringAngle: -11deg;
$sideAngle: math.div(360deg, 5);
$opacity: 0.9;
$color: rgba(30, 85, 20, $opacity);
$rotateX: -$angle;
$translateZ: $faceWidth * 0.335;
$translateY: -$faceHeight * 0.15;
$translateRingZ: $faceWidth * 0.75;
$translateRingY: $faceHeight * 0.78 + $translateY;
$translateLowerZ: $translateZ;
$translateLowerY: $faceHeight * 0.78 + $translateRingY;

.roll-for-drink-base {
  background-color: rgb(41, 34, 25);
  height: 95vh;
  overflow: hidden;
  overflow-y: hidden;
}

.page-header {
  margin-top: 10%;
  color: white;
  text-align: center;
}

.rolling-area {
  width: 85vw;
  height: 45vh;
  margin-left: 15%;
  margin-top: 10%;
}

.rolling-tray-image {
  width: 80%;
  height: 80%;
  z-index: 0;
}

@keyframes roll {
  10% {
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }
  30% {
    transform: rotateX(120deg) rotateY(240deg) rotateZ(0deg);
  }
  50% {
    transform: rotateX(240deg) rotateY(480deg) rotateZ(0deg);
  }
  70% {
    transform: rotateX(360deg) rotateY(720deg) rotateZ(0deg);
  }
  90% {
    transform: rotateX(480deg) rotateY(960deg) rotateZ(0deg);
  }
}

body {
  background: #333;
  padding: 20px;
}

.content {
  margin: auto auto;
  position: relative;
  width: $containerWidth;
  height: $containerHeight;
  // perspective: 1500px;
  transform: translate(0px, 0px);
}

.die {
  position: relative;
  width: 100%;
  height: 100%;
  margin-top: -400px;
  transform-style: preserve-3d;
  transition: transform $transitionDuration ease-out;
  cursor: pointer;

  transform: rotateX(var(--startAngleX)) rotateY(var(--startAngleY))
    rotateZ(var(--startAngleZ));

  &.rolling {
    animation: roll $animationDuration linear;
  }

  @for $i from 1 through 5 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 1;
      transform: rotateX(-$angle) rotateY($sideAngle * $angleMultiplier);
    }
  }

  @for $i from 16 through 20 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 15;
      transform: rotateX(-$angle + 180deg)
        rotateY(-$sideAngle * $angleMultiplier);
    }
  }

  @for $i from 6 through 10 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 6;
      transform: rotateX(-$ringAngle)
        rotateZ(180deg)
        rotateY($sideAngle * $angleMultiplier);
    }
  }

  @for $i from 11 through 15 {
    &[data-face="#{$i}"] {
      $angleMultiplier: $i - 8;
      transform: rotateX(-$ringAngle)
        rotateY(-$sideAngle * $angleMultiplier - math.div($sideAngle, 2));
    }
  }

  .face {
    $horizontalMargin: -$faceWidth * 0.5;

    position: absolute;
    left: 50%;
    top: 0;
    margin: 0 $horizontalMargin;
    border-left: $faceWidth * 0.5 solid transparent;
    border-right: $faceWidth * 0.5 solid transparent;
    border-bottom: $faceHeight solid $color;
    width: 0px;
    height: 0px;
    transform-style: preserve-3d;
    backface-visibility: hidden;

    counter-increment: steps 1;

    &:before {
      content: counter(steps);
      position: absolute;
      top: $faceHeight * 0.2;
      left: -$faceWidth;
      color: #fff;
      text-shadow: 2px 2px 2px #000;
      font-size: $faceHeight * 0.4;
      text-align: center;
      line-height: $faceHeight * 0.9;
      width: $faceWidth * 2;
      height: $faceHeight;
    }

    @for $i from 1 through 5 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 1;
        transform: rotateY(-$sideAngle * $angleMultiplier)
          translateZ($translateZ)
          translateY($translateY)
          rotateX($angle);
      }
    }

    @for $i from 16 through 20 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 18;
        transform: rotateY(
            $sideAngle * $angleMultiplier + math.div($sideAngle, 2)
          )
          translateZ($translateLowerZ)
          translateY($translateLowerY)
          rotateZ(180deg)
          rotateX($angle);
      }
    }

    @for $i from 6 through 10 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 11;
        transform: rotateY(-$sideAngle * $angleMultiplier)
          translateZ($translateRingZ)
          translateY($translateRingY)
          rotateZ(180deg)
          rotateX($ringAngle);
      }
    }

    @for $i from 11 through 15 {
      &:nth-child(#{$i}) {
        $angleMultiplier: $i - 8;
        transform: rotateY(
            $sideAngle * $angleMultiplier + math.div($sideAngle, 2)
          )
          translateZ($translateRingZ)
          translateY($translateRingY)
          rotateX($ringAngle);
      }
    }
  }
}

h2 {
  color: #fafafa;
}

ul {
  list-style: none;
  margin: 0;
  padding: 0;

  > li {
    display: inline-block;
    margin: 10px 10px;
  }
}

a {
  text-align: center;
  color: #fff;
  text-decoration: none;
  font-size: 25px;
  font-weight: bold;
  padding: 5px 15px;
  width: 40px;
  display: inline-block;
  border: 1px solid #dcdcdc;
  border-radius: 4px;
  background-color: #999;

  &.active {
    background-color: #333;
  }

  &:hover {
    background-color: #666;
  }

  &.randomize {
    width: auto;
    margin: 20px 10px;
  }
}
